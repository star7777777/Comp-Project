library(sm)
attach(mtcars)
df=data.frame(material-toxicity.csv)

d<-density(mtars$mpg)
plot(d)
cyl.f<-factor(cyl,levels=c(4,6,8),
              labels=c("4cylinder","6cylinder","8cylinder"))
sm.density.compare(mpg,cly,xlab="Miles per Gallon")
title(main="MPG Distribution by car cylinder")
colfill<-c(2:(2+length(levels(cyl.f))))

plot(density(df[df$is.toxic==TRUE,df$Toxicity]))
line(density(df[df$is.toxic==FALSE,df$Toxicity]add=T))

plot(density(df$))
sm.density.compare(df[df$is.toxic==TRUE,"Toxicity"],df[df$is.toxic==FALSE,"Toxicity"],xlab="hello")
title(main="stuffs")


itx<-(df$is.toxic==TRUE)
print(itx)


# d<-(df[Toxicity])&df[df$is.toxic==TRUE]))
# plot(density(d))

# counts<-table(mtcars$vs,mtcars$gear)
# barplot(counts,main="carDistributionby Gears and VS",
#         xlab="Number of Gears",col=c(""))
# 
# carrots<-data.frame(length=rnorm(100000,6,2))#creates a normal distribution 
# cukes<-data.frame(length=rnorm(50000,7,2.5))# of 100000,6,and 2
# carrots$veg<-'carrot'
# cukes$veg<-'cuke'
# vegLengths<-rbind(carrots,cukes)#combines the carrots and cukes vectors


ggplot(vegLengths,aes(length,fill=veg))+
  geom_density(alpha=0.2)




plotOverlappingHist<-function(a,b,colors=c("white","gray20","gray50"),breaks=NULL,xlim=NULL,ylim=NULL){
  ahist=NULL
  bhist=NULL
  if(!(is.null(breaks))){
    ahist=hist(a,breaks=breaks,plot=F)
    bhist=hist(b,breaks=breaks,plot=F)}
  else{
    ahist=hist(a,plot=F)
    bhist=hist(b,plot=F)
    dist=ahist$breaks[2]-ahist$breaks[1]
    breaks=seq(min(ahist$breaks,bhist$breaks),max(ahist$breaks,bhist$breaks),dist)
    ahist=hist(a,breaks=breaks,plot=F)
    bhist=hist(b,breaks=breaks,plot=F) 
  }
  if(is.null(xlim)){
    xlim=c(min(ahist$breaks,bhist$breaks),max(ahist$breaks,bhist$breaks))
  }
  if(is.null(ylim)){
    ylim=c(0,max(ahist$counts,bhist$counts))
  }
  overlap=ahist
  for(i in 1:length(overlap$counts)){
    if(ahist$counts[i]>0&bhist$counts[i]>0){
      overlap$counts[i]=min(ahist$counts[i],bhist$counts[i])
    }else{overlap$counts[i]=0}
  }
  plot(ahist,xlim=xlim,ylim=ylim,col=colors[1])
  plot(bhist,xlim=xlim,ylim=ylim,col=colors[2],add=T)
plot(overlap,xlim=xlim,ylim=ylim,col=colors[3],add=T)
}

a=df[df$is.toxic==TRUE,"Toxicity"]
b=df[df$is.toxic==FALSE,"Toxicity"]
plotOverlappingHist(a,b)


a=(df$is.toxic==TRUE&df$Toxicity)
b=(df$is.toxic==FALSE&df$Toxicity)
plotOverlappingHist(a,b)
  itx<-(df$is.toxic==TRUE)
> df[itx,]


# 
# confusionMatrix=function(cut){
#   #true positives: human called it positive, so did classifier
#   tp=length(df[df$is.toxic==TRUE&df$Toxicity>cut, "is.toxic"])
#   #truenegatives
#   tn = length(df[df$is.toxic==FALSE&df$Toxicity<cut, "is.toxic"])
#   #false positives
#   fp = length(df[df$is.toxic==FALSE&df$Toxicity>=cut, "is.toxic"])
#   #false negatives
#   fn = length(df[df$is.toxic==TRUE&df$Toxicity<=cut, "is.toxic"])
#   
#   #Sensitivity (tp rate)
#   sen = tp/(tp+fn)
#   #Specificity (tn rate)
#   spec = tn/(tp+tn)
#   #precision (positive predictive value)
#   ppv = tp/(tp + fp)
#   #accuracy
#   acc = (tp + tn)/(tp+fn+tn+fp)   # = (tp + tn)/(p+n)
#   
#   #assemble them into a data frame to return: 
#   matrix = data.frame (cutpoint = cut, 
#                         tp = tp,
#                         tn = tn,
#                         fp = fp,
#                         fn = fn,
#                         sensitivity = sen, 
#                         specificity = spec,
#                         precision = ppv, 
#                         accuracy = acc)
#   return(matrix)
#   
# }
#our confusion matrix
confusingvector=c(2,2.63,3)
sapply(confusingvector, confusionMatrix)
confusionMatrix(2.63)

 

  confusionMatrix=function(cut){
  #true positives: human called it positive, so did classifier
  tp=length(df[df$is.toxic==TRUE&df$Toxicity>cut, "is.toxic"])
  #truenegatives
  tn = length(df[df$is.toxic==FALSE&df$Toxicity<cut, "is.toxic"])
  #false positives
  fp = length(df[df$is.toxic==FALSE&df$Toxicity>=cut, "is.toxic"])
  #false negatives
  fn = length(df[df$is.toxic==TRUE&df$Toxicity<=cut, "is.toxic"])
  
  #Sensitivity (tp rate)
  sen = tp/(tp+fn)
  #Specificity (tn rate)
  spec = tn/(tp+tn)
  #precision (positive predictive value)
  ppv = tp/(tp + fp)
  #accuracy
  acc = (tp + tn)/(tp+fn+tn+fp)   # = (tp + tn)/(p+n)
  
  #assemble them into a data frame to return: 
  matrix = data.frame (cutpoint = cut, 
                       tp = tp,
                       tn = tn,
                       fp = fp,
                       fn = fn,
                       sensitivity = sen, 
                       specificity = spec,
                       precision = ppv, 
                       accuracy = acc)
  return(matrix)
  
}
simple_roc()
plot(simple_roc(df$is.toxic,df$Toxicity))
simple_roc<-function(labels,scores){
  labels<-labels[order(scores,decreasing=TRUE)]
  data.frame(TPR=cumsum(labels)/sum(labels),FPR=cumsum(!labels)/sum(!labels),labels)
}
ROC CURVE ACCOMPLISHED!!!
plot(roc(df$is.toxic,df$Toxicity,direction="<"),grid=TRUE,
     col="dark blue",ylab="Sensitivity (True Positive Rate)",
     xlab="Specificity (1-False Positive Rate)",
     main="ROC Curve of the Cytotoxicity of Cells")

#----------------------------------------------------------
#Jeremiah 

#---------------------------------------------------------------